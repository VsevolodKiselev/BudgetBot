import os
import json
import requests
from datetime import datetime
import calendar
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# ---------------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ----------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
YANDEX_DIR = os.getenv("YANDEX_DIR", "BudgetBot")

# ---------------- –†–∞–±–æ—Ç–∞ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º ----------------
def upload_to_yandex(filename, data):
    url = f'https://cloud-api.yandex.net/v1/disk/resources/upload?path={YANDEX_DIR}/{filename}&overwrite=true'
    headers = {'Authorization': f'OAuth {YANDEX_TOKEN}'}
    r = requests.get(url, headers=headers).json()
    upload_url = r['href']
    requests.put(upload_url, data=json.dumps(data).encode('utf-8'))

def download_from_yandex(filename):
    url = f'https://cloud-api.yandex.net/v1/disk/resources/download?path={YANDEX_DIR}/{filename}'
    headers = {'Authorization': f'OAuth {YANDEX_TOKEN}'}
    r = requests.get(url, headers=headers).json()
    download_url = r['href']
    resp = requests.get(download_url)
    return json.loads(resp.content)

# ---------------- –®–∞–±–ª–æ–Ω –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ ----------------
def new_month_template(month: str, year: int):
    return {
        'month': month,
        'year': year,
        'expenses': [
            {'emoji': 'üéÅ', 'name': '–ü–æ–¥–∞—Ä–æ–∫', 'amount': 0},
            {'emoji': 'üè†', 'name': '–ò–ø–æ—Ç–µ–∫–∞', 'amount': 0},
            {'emoji': 'üí≥', 'name': '–ö—Ä–µ–¥–∏—Ç—ã', 'amount': 0},
            {'emoji': 'üìå', 'name': '–î–æ–ª–≥ –ì–æ—à–µ', 'amount': 0},
            {'emoji': 'üè¢', 'name': '–ö–æ–º–º—É–Ω–∞–ª–∫–∞', 'amount': 0},
            {'emoji': 'üöå', 'name': '–ü—Ä–æ–µ–∑–¥–Ω–æ–π', 'amount': 0},
            {'emoji': 'üß™', 'name': '–ê–Ω–∞–ª–∏–∑—ã –í–ù–ñ', 'amount': 0},
            {'emoji': 'üõÅ', 'name': '–ê–∫—Ä–∏–ª –≤–∞–Ω–Ω—ã', 'amount': 0},
            {'emoji': 'üöó', 'name': '–ü—Ä–æ–µ–∑–¥', 'amount': 0},
            {'emoji': 'üç¥', 'name': '–ï–¥–∞ –≤ –æ—Ñ–∏—Å–µ', 'amount': 0},
            {'emoji': 'üíÑ', 'name': '–ë—å—é—Ç–∏', 'amount': 0},
            {'emoji': 'üìù', 'name': '–ê–Ω–≥–ª. —è–∑—ã–∫', 'amount': 0},
            {'emoji': 'üíÖ', 'name': '–ö–æ—Å–º–µ—Ç–∏–∫–∞', 'amount': 0},
        ],
        'income': [],
        'last_message_id': None,
        'awaiting_emoji': None
    }

# ---------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞ ----------------
def generate_template_text(data):
    text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã/–î–æ—Ö–æ–¥—ã {data['month']} {data['year']}\n\n"
    for idx, exp in enumerate(data['expenses'], 1):
        text += f"{idx}. {exp['emoji']} {exp['name']} ‚Äî {exp['amount']} ‚ÇΩ\n"
    text += "\nüí∞ –î–æ—Ö–æ–¥—ã\n"
    if data['income']:
        for idx, inc in enumerate(data['income'], 1):
            text += f"{idx}. {inc['name']} ‚Äî {inc['amount']} ‚ÇΩ\n"
    else:
        text += "–î–æ—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"
    return text

# ---------------- Telegram ----------------
def start(update: Update, context: CallbackContext):
    now = datetime.now()
    month_name = now.strftime('%B')
    year = now.year
    filename = f'budget_{month_name}_{year}.json'

    # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–µ—Å—è—Ü, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    try:
        data = download_from_yandex(filename)
    except:
        data = new_month_template(month_name, year)
        upload_to_yandex(filename, data)

    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –±—é–¥–∂–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "- –Ω–æ–≤—ã–π –º–µ—Å—è—Ü\n"
        "- —Ä–∞—Å—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
        "- –¥–æ—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
        "- —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å <–º–µ—Å—è—Ü> <–≥–æ–¥>\n"
        "- —É–¥–∞–ª–∏ <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
    )

def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    chat_id = update.message.chat_id
    now = datetime.now()
    month_name = now.strftime('%B')
    year = now.year
    filename = f'budget_{month_name}_{year}.json'

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        data = download_from_yandex(filename)
    except:
        data = new_month_template(month_name, year)

    ltext = text.lower()

    # --------- –ù–æ–≤—ã–π –º–µ—Å—è—Ü ----------
    if ltext.startswith('–Ω–æ–≤—ã–π –º–µ—Å—è—Ü'):
        month_index = now.month
        year_new = now.year
        if month_index == 12:
            next_month_index = 1
            year_new += 1
        else:
            next_month_index = month_index + 1
        next_month_name = calendar.month_name[next_month_index]
        data = new_month_template(next_month_name, year_new)
        filename = f'budget_{next_month_name}_{year_new}.json'
        upload_to_yandex(filename, data)
        update.message.reply_text(f'–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–µ—Å—è—Ü: {next_month_name} {year_new}')

    # --------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ ----------
    elif ltext.startswith('—Ä–∞—Å—Ö–æ–¥'):
        parts = text.split()
        if len(parts) < 3:
            update.message.reply_text('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: —Ä–∞—Å—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return
        try:
            amount = int(parts[1])
            name = parts[2]
            account = ' '.join(parts[3:]) if len(parts) > 3 else ''
        except:
            update.message.reply_text('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: —Ä–∞—Å—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return
        # –ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ ‚Üí –∂–¥—ë–º —Å–º–∞–π–ª–∏–∫
        data['awaiting_emoji'] = {'name': name, 'amount': amount, 'account': account}
        update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ "{name}"')

    # --------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–∞–π–ª–∏–∫–∞ ----------
    elif data.get('awaiting_emoji'):
        emoji = text[0]
        new_exp = data['awaiting_emoji']
        data['expenses'].append({
            'name': new_exp['name'],
            'amount': new_exp['amount'],
            'emoji': emoji,
            'account': new_exp['account']
        })
        data['awaiting_emoji'] = None
        update.message.reply_text(f'–†–∞—Å—Ö–æ–¥ "{new_exp["name"]}" –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å–º–∞–π–ª–∏–∫–æ–º {emoji}')

    # --------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ ----------
    elif ltext.startswith('–¥–æ—Ö–æ–¥'):
        parts = text.split()
        if len(parts) < 2:
            update.message.reply_text('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: –¥–æ—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return
        try:
            amount = int(parts[1])
            name = ' '.join(parts[2:]).strip()
            if not name:
                name = "–î–æ—Ö–æ–¥"
        except:
            update.message.reply_text('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: –¥–æ—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return
        for inc in data['income']:
            if inc['name'] == name:
                inc['amount'] += amount
                break
        else:
            data['income'].append({'name': name, 'amount': amount})
        update.message.reply_text(f'–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –¥–æ—Ö–æ–¥ "{name}"')

    # --------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ ----------
    template_text = generate_template_text(data)
    if data.get('last_message_id'):
        try:
            context.bot.delete_message(chat_id=chat_id, message_id=data['last_message_id'])
        except:
            pass
    msg = update.message.reply_text(template_text)
    data['last_message_id'] = msg.message_id

    # --------- –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ ----------
    upload_to_yandex(filename, data)

def main():
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
