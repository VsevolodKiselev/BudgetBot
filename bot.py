import os
import json
import requests
from datetime import datetime
import calendar
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

BOT_TOKEN = os.environ['BOT_TOKEN']
YANDEX_TOKEN = os.environ['YANDEX_TOKEN']
YANDEX_DIR = 'BudgetBot'  # –ø–∞–ø–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ

# ---------------- –†–∞–±–æ—Ç–∞ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º ----------------
def upload_to_yandex(filename, data):
    url = f'https://cloud-api.yandex.net/v1/disk/resources/upload?path={YANDEX_DIR}/{filename}&overwrite=true'
    headers = {'Authorization': f'OAuth {YANDEX_TOKEN}'}
    r = requests.get(url, headers=headers).json()
    upload_url = r['href']
    requests.put(upload_url, data=json.dumps(data).encode('utf-8'))

def download_from_yandex(filename):
    url = f'https://cloud-api.yandex.net/v1/disk/resources/download?path={YANDEX_DIR}/{filename}'
    headers = {'Authorization': f'OAuth {YANDEX_TOKEN}'}
    r = requests.get(url, headers=headers).json()
    download_url = r['href']
    resp = requests.get(download_url)
    return json.loads(resp.content)

# ---------------- –®–∞–±–ª–æ–Ω –±—é–¥–∂–µ—Ç–∞ ----------------
def new_month_template(month: str, year: int):
    return {
        'month': month,
        'year': year,
        'expenses': [],
        'income': [],
        'last_message_id': None,
        'awaiting_emoji': None
    }

# ---------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞ ----------------
def generate_template_text(data):
    text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã/–î–æ—Ö–æ–¥—ã {data['month']} {data['year']}\n\n"
    for idx, exp in enumerate(data['expenses'], 1):
        text += f"{idx}. {exp['emoji']} {exp['name']} ‚Äî {exp['amount']} ‚ÇΩ\n"
    text += "\nüí∞ –î–æ—Ö–æ–¥—ã\n"
    for idx, inc in enumerate(data['income'], 1):
        text += f"{idx}. {inc['name']} ‚Äî {inc['amount']} ‚ÇΩ\n"
    return text

# ---------------- Telegram ----------------
def start(update: Update, context: CallbackContext):
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –±—é–¥–∂–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω. –í–≤–æ–¥–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤, –¥–æ—Ö–æ–¥–æ–≤ –∏ –º–µ—Å—è—Ü–∞.')

def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    chat_id = update.message.chat_id
    now = datetime.now()
    month_name = now.strftime('%B')
    year = now.year
    filename = f'budget_{month_name}_{year}.json'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    try:
        data = download_from_yandex(filename)
    except:
        data = new_month_template(month_name, year)

    # --------- –û–∂–∏–¥–∞–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ ----------
    if data.get('awaiting_emoji'):
        emoji = text.strip()[0]  # –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –∫–∞–∫ —Å–º–∞–π–ª–∏–∫
        new_exp = data['awaiting_emoji']
        data['expenses'].append({
            'name': new_exp['name'],
            'amount': new_exp['amount'],
            'emoji': emoji,
            'account': new_exp['account']
        })
        data['awaiting_emoji'] = None
        update.message.reply_text(f'–†–∞—Å—Ö–æ–¥ "{new_exp["name"]}" –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å–º–∞–π–ª–∏–∫–æ–º {emoji}')

    else:
        ltext = text.lower()

        # --------- –ù–æ–≤—ã–π –º–µ—Å—è—Ü (–∞–≤—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π) ----------
        if ltext.startswith('–Ω–æ–≤—ã–π –º–µ—Å—è—Ü'):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
            month_index = now.month
            year_new = now.year

            # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            if month_index == 12:
                next_month_index = 1
                year_new += 1
            else:
                next_month_index = month_index + 1

            next_month_name = calendar.month_name[next_month_index]
            month_name = next_month_name

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            data = new_month_template(month_name, year_new)
            filename = f'budget_{month_name}_{year_new}.json'

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
            update.message.reply_text(f'–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–µ—Å—è—Ü: {month_name} {year_new}')

        # --------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—è—Ü ----------
        elif ltext.startswith('—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'):
            parts = text.split()
            if len(parts) >= 3:
                month_name = parts[1]
                year = int(parts[2])
            filename = f'budget_{month_name}_{year}.json'
            try:
                data = download_from_yandex(filename)
                update.message.reply_text(f'–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü: {month_name} {year}')
            except:
                update.message.reply_text(f'–§–∞–π–ª –¥–ª—è {month_name} {year} –Ω–µ –Ω–∞–π–¥–µ–Ω')
                return

        # --------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ ----------
        elif ltext.startswith('—Ä–∞—Å—Ö–æ–¥'):
            parts = text.split()
            try:
                amount = int(parts[1])
                name = parts[2]
                account = ' '.join(parts[3:]) if len(parts) > 3 else ''
            except:
                update.message.reply_text('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: —Ä–∞—Å—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–∞–≤–∞–Ω—Å/–∑–∞—Ä–ø–ª–∞—Ç–∞]')
                return
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—Ö–æ–¥
            for exp in data['expenses']:
                if exp['name'] == name:
                    exp['amount'] += amount
                    break
            else:
                # –ù–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ ‚Üí –∂–¥—ë–º —Å–º–∞–π–ª–∏–∫
                data['awaiting_emoji'] = {'name': name, 'amount': amount, 'account': account}
                update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ "{name}"')
                upload_to_yandex(filename, data)
                return

        # --------- –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ ----------
        elif ltext.startswith('—É–¥–∞–ª–∏'):
            parts = text.split()
            if len(parts) < 2:
                update.message.reply_text('–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: —É–¥–∞–ª–∏ <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
                return
            name = parts[1]
            before_len = len(data['expenses'])
            data['expenses'] = [exp for exp in data['expenses'] if exp['name'] != name]
            if len(data['expenses']) < before_len:
                update.message.reply_text(f'–†–∞—Å—Ö–æ–¥ "{name}" —É–¥–∞–ª—ë–Ω')
            else:
                update.message.reply_text(f'–†–∞—Å—Ö–æ–¥ "{name}" –Ω–µ –Ω–∞–π–¥–µ–Ω')

        # --------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ ----------
        elif ltext.startswith('–¥–æ—Ö–æ–¥'):
            parts = text.split()
            try:
                amount = int(parts[1])
                name = ' '.join(parts[2:])
            except:
                update.message.reply_text('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: –¥–æ—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
                return
            for inc in data['income']:
                if inc['name'] == name:
                    inc['amount'] += amount
                    break
            else:
                data['income'].append({'name': name, 'amount': amount})

    # --------- –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ ----------
    template_text = generate_template_text(data)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    if data.get('last_message_id'):
        try:
            context.bot.delete_message(chat_id=chat_id, message_id=data['last_message_id'])
        except:
            pass
    msg = update.message.reply_text(template_text)
    data['last_message_id'] = msg.message_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    upload_to_yandex(filename, data)

def main():
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
