import os
import json
import requests
import calendar
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# ---------------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
YANDEX_DIR = os.getenv("YANDEX_DIR") or "BudgetBot"

# ---------------- –†–∞–±–æ—Ç–∞ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º ----------------
def upload_to_yandex(filename, data):
    url = f'https://cloud-api.yandex.net/v1/disk/resources/upload?path={YANDEX_DIR}/{filename}&overwrite=true'
    headers = {'Authorization': f'OAuth {YANDEX_TOKEN}'}
    r = requests.get(url, headers=headers).json()
    if 'href' not in r:
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {r}")
    upload_url = r['href']
    requests.put(upload_url, data=json.dumps(data).encode('utf-8'))

def download_from_yandex(filename):
    url = f'https://cloud-api.yandex.net/v1/disk/resources/download?path={YANDEX_DIR}/{filename}'
    headers = {'Authorization': f'OAuth {YANDEX_TOKEN}'}
    r = requests.get(url, headers=headers).json()
    if 'href' not in r:
        return None  # —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    download_url = r['href']
    resp = requests.get(download_url)
    return json.loads(resp.content)

# ---------------- –®–∞–±–ª–æ–Ω –±—é–¥–∂–µ—Ç–∞ ----------------
def new_month_template(month: str, year: int):
    expenses = [
        {"emoji": "üéÅ", "name": "–ü–æ–¥–∞—Ä–æ–∫", "amount": 0},
        {"emoji": "üè†", "name": "–ò–ø–æ—Ç–µ–∫–∞", "amount": 0},
        {"emoji": "üí≥", "name": "–ö—Ä–µ–¥–∏—Ç—ã", "amount": 0},
        {"emoji": "üìå", "name": "–î–æ–ª–≥ –ì–æ—à–µ", "amount": 0},
        {"emoji": "üè¢", "name": "–ö–æ–º–º—É–Ω–∞–ª–∫–∞", "amount": 0},
        {"emoji": "üöå", "name": "–ü—Ä–æ–µ–∑–¥–Ω–æ–π", "amount": 0},
        {"emoji": "üß™", "name": "–ê–Ω–∞–ª–∏–∑—ã –í–ù–ñ", "amount": 0},
        {"emoji": "üõÅ", "name": "–ê–∫—Ä–∏–ª –≤–∞–Ω–Ω—ã", "amount": 0},
        {"emoji": "üöó", "name": "–ü—Ä–æ–µ–∑–¥", "amount": 0},
        {"emoji": "üç¥", "name": "–ï–¥–∞ –≤ –æ—Ñ–∏—Å–µ (—Å—Ä–µ–¥–Ω. ‚ÇΩ –≤ –¥–µ–Ω—å)", "amount": 0},
        {"emoji": "üíÑ", "name": "–ë—å—é—Ç–∏", "amount": 0},
        {"emoji": "üìù", "name": "–ê–Ω–≥–ª. —è–∑—ã–∫", "amount": 0},
        {"emoji": "üíÖ", "name": "–ö–æ—Å–º–µ—Ç–∏–∫–∞", "amount": 0},
    ]
    income = [
        {"name": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "amount": 0},
        {"name": "–ê–≤–∞–Ω—Å", "amount": 0},
        {"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã", "amount": 0},
    ]
    return {
        "month": month,
        "year": year,
        "expenses": expenses,
        "income": income,
        "awaiting_emoji": None,
    }

# ---------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞ ----------------
def generate_template_text(data):
    text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã/–î–æ—Ö–æ–¥—ã {data['month']} {data['year']}\n\n"
    for idx, exp in enumerate(data['expenses'], 1):
        text += f"{idx}. {exp['emoji']} {exp['name']} ‚Äî {exp['amount']} ‚ÇΩ\n"
    text += "\nüí∞ –î–æ—Ö–æ–¥—ã\n"
    for inc in data['income']:
        text += f"{inc['name']} ‚Äî {inc['amount']} ‚ÇΩ\n"
    return text

# ---------------- Telegram ----------------
def start(update: Update, context: CallbackContext):
    now = datetime.now()
    month_name = now.strftime("%B")
    year = now.year
    filename = f"budget_{month_name}_{year}.json"
    data = download_from_yandex(filename) or new_month_template(month_name, year)
    upload_to_yandex(filename, data)
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –±—é–¥–∂–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω.\n\n" + generate_template_text(data)
    )

def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.lower()
    now = datetime.now()
    month_name = now.strftime("%B")
    year = now.year
    filename = f"budget_{month_name}_{year}.json"
    data = download_from_yandex(filename) or new_month_template(month_name, year)

    if text.startswith("—Ä–∞—Å—Ö–æ–¥"):
        parts = update.message.text.split()
        if len(parts) < 3:
            update.message.reply_text(
                '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: —Ä–∞—Å—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>'
            )
            return
        try:
            amount = int(parts[1])
        except:
            update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        name = " ".join(parts[2:])
        # –∏—â–µ–º —Ä–∞—Å—Ö–æ–¥
        for exp in data['expenses']:
            if exp['name'].lower() == name.lower():
                exp['amount'] += amount
                break
        else:
            update.message.reply_text("–¢–∞–∫–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ—Ç –≤ —à–∞–±–ª–æ–Ω–µ")
            return
        upload_to_yandex(filename, data)
        update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥ {name} ‚Äî {amount} ‚ÇΩ")

    elif text.startswith("–¥–æ—Ö–æ–¥"):
        parts = update.message.text.split()
        if len(parts) < 2:
            update.message.reply_text(
                '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: –¥–æ—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>'
            )
            return
        try:
            amount = int(parts[1])
        except:
            update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        name = " ".join(parts[2:]) if len(parts) > 2 else parts[1]
        for inc in data['income']:
            if inc['name'].lower() == name.lower():
                inc['amount'] += amount
                break
        else:
            data['income'].append({"name": name, "amount": amount})
        upload_to_yandex(filename, data)
        update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥ {name} ‚Äî {amount} ‚ÇΩ")

    update.message.reply_text(generate_template_text(data))

def main():
    from telegram.ext import Dispatcher, CallbackContext
    from telegram import Bot
    from flask import Flask, request

    app = Flask(__name__)
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(bot, None, workers=0)

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    @app.route(f"/{BOT_TOKEN}", methods=["POST"])
    def webhook():
        update = Update.de_json(request.get_json(force=True), bot)
        dp.process_update(update)
        return "ok"

    @app.route("/")
    def index():
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook (–∑–∞–º–µ–Ω–∏ <URL> –Ω–∞ —Å—Å—ã–ª–∫—É Railway)
    WEBHOOK_URL = f"https:///railway.com/project/2f7afa43-e7fd-4079-8e2a-4636172245b9/service/b3b06929-351b-42be-b6e3-5d629708b5d8?environmentId=f1ed4dff-52d5-4e5d-839f-1358865809b9/{BOT_TOKEN}"
    bot.set_webhook(WEBHOOK_URL)

    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

if __name__ == "__main__":
    main()
