import os
import json
import datetime
import requests
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, MessageHandler, Filters
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
WEBHOOK_URL = f"{os.getenv('RAILWAY_URL')}/{TOKEN}"
DATA_FILE = "budget_data.json"

bot = Bot(token=TOKEN)
app = Flask(__name__)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def upload_to_yandex(filename, data):
    url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {"path": filename, "overwrite": "true"}
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    r = requests.get(url, headers=headers, params=params).json()
    href = r.get("href")
    if href:
        requests.put(href, data=json.dumps(data, ensure_ascii=False, indent=2).encode("utf-8"))

# --- –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω ---
TEMPLATE = """üí∏ –†–∞—Å—Ö–æ–¥—ã/–î–æ—Ö–æ–¥—ã {month}
1. üéÅ –ü–æ–¥–∞—Ä–æ–∫ ‚Äî ‚ÇΩ
2. üè† –ò–ø–æ—Ç–µ–∫–∞ ‚Äî ‚ÇΩ
3. üí≥ –ö—Ä–µ–¥–∏—Ç—ã ‚Äî ‚ÇΩ
4. üìå –î–æ–ª–≥ –ì–æ—à–µ ‚Äî ‚ÇΩ
5. üè¢ –ö–æ–º–º—É–Ω–∞–ª–∫–∞ ‚Äî ‚ÇΩ
6. üöå –ü—Ä–æ–µ–∑–¥–Ω–æ–π ‚Äî ‚ÇΩ
7. üß™ –ê–Ω–∞–ª–∏–∑—ã –í–ù–ñ ‚Äî ‚ÇΩ
8. üõÅ –ê–∫—Ä–∏–ª –≤–∞–Ω–Ω—ã ‚Äî ‚ÇΩ
9. üöó –ü—Ä–æ–µ–∑–¥ ‚Äî ‚ÇΩ
10. üç¥ –ï–¥–∞ –≤ –æ—Ñ–∏—Å–µ (—Å—Ä–µ–¥–Ω. ‚ÇΩ –≤ –¥–µ–Ω—å) ‚Äî ‚ÇΩ
11. üíÑ –ë—å—é—Ç–∏ ‚Äî ‚ÇΩ
12. üìù –ê–Ω–≥–ª. —è–∑—ã–∫ ‚Äî ‚ÇΩ
13. üíÖ –ö–æ—Å–º–µ—Ç–∏–∫–∞ ‚Äî ‚ÇΩ

–ò—Ç–æ–≥: ‚ÇΩ

üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã

–ó–∞—Ä–ø–ª–∞—Ç–∞
‚Ä¢ –î–æ—Ö–æ–¥: ‚ÇΩ
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: –ø.
‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: ‚ÇΩ

–ê–≤–∞–Ω—Å
‚Ä¢ –î–æ—Ö–æ–¥: ‚ÇΩ
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: –ø.
‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: ‚ÇΩ

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã
‚Ä¢ –î–æ—Ö–æ–¥: ‚ÇΩ
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: –ø.
‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: ‚ÇΩ

üßæ –ò—Ç–æ–≥ –º–µ—Å—è—Ü–∞
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ‚ÇΩ
‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ‚ÇΩ
‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: ‚ÇΩ
"""

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
def handle_message(update: Update, context):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip()
    month = datetime.datetime.now().strftime("%B %Y")
    data = load_data()

    if user_id not in data:
        data[user_id] = {"month": month, "expenses": [], "incomes": []}
        update.message.reply_text(TEMPLATE.format(month=month))
        save_data(data)
        upload_to_yandex(f"{user_id}_budget.json", data)
        return

    user_data = data[user_id]

    if text.lower().startswith("—Ä–∞—Å—Ö–æ–¥"):
        try:
            value = int(text.split()[1])
            user_data["expenses"].append(value)
            update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: {value} ‚ÇΩ")
        except:
            update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –†–∞—Å—Ö–æ–¥ 1000")
    elif text.lower().startswith("–¥–æ—Ö–æ–¥"):
        try:
            value = int(text.split()[1])
            user_data["incomes"].append(value)
            update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥: {value} ‚ÇΩ")
        except:
            update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –î–æ—Ö–æ–¥ 5000")
    else:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ '–î–æ—Ö–æ–¥ 5000' –∏–ª–∏ '–†–∞—Å—Ö–æ–¥ 1000'")

    save_data(data)
    upload_to_yandex(f"{user_id}_budget.json", data)

# --- Flask webhook ---
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Dispatcher ---
from telegram.ext import Dispatcher
dispatcher = Dispatcher(bot, None, workers=0)
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    bot.delete_webhook()
    bot.set_webhook(WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
