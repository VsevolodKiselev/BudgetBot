import os
import json
import requests
from datetime import datetime
import calendar
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# ---------------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
YANDEX_TOKEN = os.getenv('YANDEX_TOKEN')
YANDEX_DIR = os.getenv('YANDEX_DIR')

if not BOT_TOKEN or not YANDEX_TOKEN or not YANDEX_DIR:
    raise ValueError('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –ø–∞–ø–∫–∞ YANDEX_DIR –≤ .env')

# ---------------- –†–∞–±–æ—Ç–∞ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º ----------------
def upload_to_yandex(filename, data):
    url = f'https://cloud-api.yandex.net/v1/disk/resources/upload?path={YANDEX_DIR}/{filename}&overwrite=true'
    headers = {'Authorization': f'OAuth {YANDEX_TOKEN}'}
    r = requests.get(url, headers=headers).json()
    if 'href' not in r:
        print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:', r)
        return False
    upload_url = r['href']
    requests.put(upload_url, data=json.dumps(data).encode('utf-8'))
    return True

def download_from_yandex(filename):
    url = f'https://cloud-api.yandex.net/v1/disk/resources/download?path={YANDEX_DIR}/{filename}'
    headers = {'Authorization': f'OAuth {YANDEX_TOKEN}'}
    r = requests.get(url, headers=headers).json()
    if 'href' not in r:
        raise FileNotFoundError(f'–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ')
    download_url = r['href']
    resp = requests.get(download_url)
    return json.loads(resp.content)

# ---------------- –®–∞–±–ª–æ–Ω –±—é–¥–∂–µ—Ç–∞ ----------------
DEFAULT_EXPENSES = [
    {'emoji': 'üéÅ', 'name': '–ü–æ–¥–∞—Ä–æ–∫', 'amount': 0},
    {'emoji': 'üè†', 'name': '–ò–ø–æ—Ç–µ–∫–∞', 'amount': 0},
    {'emoji': 'üí≥', 'name': '–ö—Ä–µ–¥–∏—Ç—ã', 'amount': 0},
    {'emoji': 'üìå', 'name': '–î–æ–ª–≥ –ì–æ—à–µ', 'amount': 0},
    {'emoji': 'üè¢', 'name': '–ö–æ–º–º—É–Ω–∞–ª–∫–∞', 'amount': 0},
    {'emoji': 'üöå', 'name': '–ü—Ä–æ–µ–∑–¥–Ω–æ–π', 'amount': 0},
    {'emoji': 'üß™', 'name': '–ê–Ω–∞–ª–∏–∑—ã –í–ù–ñ', 'amount': 0},
    {'emoji': 'üõÅ', 'name': '–ê–∫—Ä–∏–ª –≤–∞–Ω–Ω—ã', 'amount': 0},
    {'emoji': 'üöó', 'name': '–ü—Ä–æ–µ–∑–¥', 'amount': 0},
    {'emoji': 'üç¥', 'name': '–ï–¥–∞ –≤ –æ—Ñ–∏—Å–µ', 'amount': 0},
    {'emoji': 'üíÑ', 'name': '–ë—å—é—Ç–∏', 'amount': 0},
    {'emoji': 'üìù', 'name': '–ê–Ω–≥–ª. —è–∑—ã–∫', 'amount': 0},
    {'emoji': 'üíÖ', 'name': '–ö–æ—Å–º–µ—Ç–∏–∫–∞', 'amount': 0}
]

DEFAULT_INCOME = [
    {'name': '–ó–∞—Ä–ø–ª–∞—Ç–∞', 'amount': 0},
    {'name': '–ê–≤–∞–Ω—Å', 'amount': 0},
    {'name': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã', 'amount': 0}
]

def new_month_template(month: str, year: int):
    return {
        'month': month,
        'year': year,
        'expenses': [exp.copy() for exp in DEFAULT_EXPENSES],
        'income': [inc.copy() for inc in DEFAULT_INCOME],
        'last_message_id': None,
        'awaiting_emoji': None
    }

# ---------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞ ----------------
def generate_template_text(data):
    text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã/–î–æ—Ö–æ–¥—ã {data['month']} {data['year']}\n\n"
    for idx, exp in enumerate(data['expenses'], 1):
        text += f"{idx}. {exp['emoji']} {exp['name']} ‚Äî {exp['amount']} ‚ÇΩ\n"
    text += "\nüí∞ –î–æ—Ö–æ–¥—ã\n"
    for inc in data['income']:
        text += f"{inc['name']} ‚Äî {inc['amount']} ‚ÇΩ\n"
    return text

# ---------------- Telegram ----------------
def start(update: Update, context: CallbackContext):
    now = datetime.now()
    month_name = now.strftime('%B')
    year = now.year
    filename = f'budget_{month_name}_{year}.json'

    try:
        data = download_from_yandex(filename)
    except:
        data = new_month_template(month_name, year)
        upload_to_yandex(filename, data)

    text = generate_template_text(data)
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –±—é–¥–∂–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω.')
    update.message.reply_text(text)

def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    chat_id = update.message.chat_id
    now = datetime.now()
    month_name = now.strftime('%B')
    year = now.year
    filename = f'budget_{month_name}_{year}.json'

    try:
        data = download_from_yandex(filename)
    except:
        data = new_month_template(month_name, year)

    # –û–∂–∏–¥–∞–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞
    if data.get('awaiting_emoji'):
        emoji = text[0]
        new_exp = data['awaiting_emoji']
        data['expenses'].append({
            'name': new_exp['name'],
            'amount': new_exp['amount'],
            'emoji': emoji
        })
        data['awaiting_emoji'] = None
        update.message.reply_text(f'–†–∞—Å—Ö–æ–¥ "{new_exp["name"]}" –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å–º–∞–π–ª–∏–∫–æ–º {emoji}')
        upload_to_yandex(filename, data)
        return

    parts = text.split()
    ltext = text.lower()

    if ltext.startswith('–Ω–æ–≤—ã–π –º–µ—Å—è—Ü'):
        month_index = now.month
        year_new = now.year
        next_month_index = 1 if month_index == 12 else month_index + 1
        if month_index == 12:
            year_new += 1
        next_month_name = calendar.month_name[next_month_index]
        data = new_month_template(next_month_name, year_new)
        filename = f'budget_{next_month_name}_{year_new}.json'
        upload_to_yandex(filename, data)
        update.message.reply_text(f'–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–µ—Å—è—Ü: {next_month_name} {year_new}')
        update.message.reply_text(generate_template_text(data))
        return

    elif ltext.startswith('–¥–æ—Ö–æ–¥'):
        try:
            amount = int(parts[1])
            name = ' '.join(parts[2:]) or '–î–æ—Ö–æ–¥'
        except:
            update.message.reply_text('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: –¥–æ—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return
        for inc in data['income']:
            if inc['name'].lower() == name.lower():
                inc['amount'] += amount
                break
        else:
            data['income'].append({'name': name, 'amount': amount})
        upload_to_yandex(filename, data)
        update.message.reply_text(f'–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –¥–æ—Ö–æ–¥ "{name}"')

    elif ltext.startswith('—Ä–∞—Å—Ö–æ–¥'):
        try:
            amount = int(parts[1])
            name = parts[2]
        except:
            update.message.reply_text('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: —Ä–∞—Å—Ö–æ–¥ <—Å—É–º–º–∞> <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return
        for exp in data['expenses']:
            if exp['name'].lower() == name.lower():
                exp['amount'] += amount
                upload_to_yandex(filename, data)
                update.message.reply_text(f'–†–∞—Å—Ö–æ–¥ "{name}" –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {amount} ‚ÇΩ')
                return
        data['awaiting_emoji'] = {'name': name, 'amount': amount}
        update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ "{name}"')
        upload_to_yandex(filename, data)
        return

    elif ltext.startswith('—É–¥–∞–ª–∏'):
        if len(parts) < 2:
            update.message.reply_text('–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: —É–¥–∞–ª–∏ <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
            return
        name = parts[1]
        before_len = len(data['expenses'])
       
